// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  COACH
  DEAN
}

enum YearLevel {
  FIRST
  SECOND
  THIRD
  FOURTH
}

model Department {
  id Int @id @default(autoincrement())
  code String @unique
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  programs Program[]
  dean Dean?
}

model Program {
  id Int @id @default(autoincrement())
  uniqueId String @unique
  code String @unique
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departmentId Int
  department Department @relation(fields: [departmentId], references: [id])

  students Student[]
  coaches Coach[]
}

model Dean {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  firstName String
  lastName String
  deanId String @unique
  contact String?
  address String?
  role Role @default(DEAN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departmentId Int @unique 
  department Department @relation(fields: [departmentId], references: [id])
}

model Student {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  firstName String
  lastName String
  studentId String @unique
  yearLevel YearLevel @default(FIRST)
  contact String?
  address String?
  role Role @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  programId Int
  program Program @relation(fields: [programId], references: [id])

  assignment Assignment? 
}

model Coach {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  firstName String
  lastName String
  coachId String @unique
  contact String?
  address String?
  role Role @default(COACH)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  programId Int
  program Program @relation(fields: [programId], references: [id])

  assignments Assignment[]
}

model Assignment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentId Int @unique
  student Student @relation(fields: [studentId], references: [id])

  coachId Int
  coach Coach @relation(fields: [coachId], references: [id])
}
